################################
# Setting your working directory
################################
getwd() #to get default wd
ls() #list functions in the script or file
dir() #list of file in wd
#To change directory: File > Change dir... > Browse for folder
source() #to load codes in the file

###########################
# Overview and history of R
###########################
#A dialect of S. The book: Programming with Data by John Chambers. Document version 4 of S. A reference book for this workshop. www.stat.bell-labs.com/S/history.html
#Core group: control the source code for R.
#Syntax and semantics similar to S. Community in R-help (r-help@r-project.org) and R-devel (developers) as well as StackOverflow.
#Free software foundation www.fsf.org
#Drawbacks: objects must generally be stored in physical memory (odbc?).
#Design: Base system - CRAN (developed by users and programmers) | Recommended Packages | ej. bioconductor.org
#references http://www.r-project.org/doc/bib/R-books.html

##############
# Getting help
##############
#Search the archives of the forum
#Google the error message (cut and paste it)
#Read the manual
#FAQ
#Read the source code
#Post in the discussion board
##The problem should be reproducible (dataset and code)
##What is your expectation?
##Version of the product
##Operating system
##examples of subject header: "R 3.0.2 lm() funtion on Mac OS  --seg fault on large data frame"
##Describe the goal, not the steps

################################
# R Console Input and Evaluation
################################
#entering input expressions either numerical or characters strings (msg <- "hello")
# ":" operator to create integer sequence (x <-1:20)


#######################################
# Data Types - R Objects and Attributes
#######################################
#Atomic objects:
##character
##numerical
##integer
##complex
##logical
#Basic objects:
##vector; only contains objects of the same class. Except for the list. To create them use the empty funtion: "vector(*[class],*[lenght])"
#L suffix to specify explicitly that you want an integer ex: "1L"
#"Inf" for infinity
#"NaN not a number"
#"attributes()" to set or modify the attributes of the file
##"dim()"
##"class()"
##"lenght()"

##############################
# Data Types: Vector and Lists
##############################

#"c()" to create vector of objects
# vector function "x <- vector ("numeric", length = 10)
#for diff object R will create the leat common denominator (lcd); number, character, logical (implicit coercion)
#Explicit coercion: to turn to other formats "as"
#     x <- 0:6
#     class(x)
#     as.numeric(x)
#     as.logical(x)
#     as.character(x)
#List: like a vector but with objects of diff kinds ex. "x <- list(1, "a", TRUE, 1 +4i)" results in 4 vectors

######################
# Data Types: Matrices
######################

#Vectors with dimensions attribute. Constructed columnwise.
#     m <- matrix(nrow = 2, ncol = 3)
#dimensions
#     dim(m)
#     attributes(m)
#     m <- matrix(1:6, nrow = 2, ncol = 3)
#created from a vector
#     m <- 1:10
#2 rows, 5 cols
#     dim(m) <- c(2,5) 
#binding cols and rows
#     x <- 1:3
#     y <- 10:12
#     cbind(x,y)
#     rbind(x,y)

#####################
# Data Types: Factors
#####################

#vectors for categorical data either ordered (adj prof, aux prof, full prof) or unordered (male and female)
#     x <- factor(c("yes", "yes", "no", "yes", "no"))
#                 levels = c("yes", "no"))
#     table(x)
#     unclass(x)

############################
# Data Types: Missing Values
############################

#Na or NaN
#test objects if there are NA 
#     is.na()
#test objects if there are NaN
#     is.nan()
# NaN -> NA ; not the reverse
#example; logical test
#     x <- c(1, 2, NA, 10, 3)
#     is.na(x)

#########################
# Data Types: Data Frames
#########################

#used to store tabular data. List to have the same length. But not necc from the same type or classes.
#every row could have a name
#     row.names
#usually created by calling
#     read.table() 
#     read.csv()
#converted (coersed) to matrix by calling
#     data.matrix()
#     x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
#     x
#     nrow(x)
#     ncol(x)

##############################
# Data Types: Names Attributes
##############################

#Name objects
#     x <- 1:3
#     names(x)
#     names(x) <- c("foo", "bar", "norf")
#Name list
#      x <- list(a = 1, b = 2, c = 3)
#      x 
#Name matrix
#      m <- matrix(1:4, nrow = 2, ncol = 2)
#      dimnames(m) <- list(c("a", "b"), c("c", "d"))
#      m

######################
# Reading Tabular Data
######################

#read text files and make dataframes
#      read.table
#           ex. data <- read.table("foo.txt")
#      read.csv
#       
#read any kind of lines of a text files
#      readLines
#      source
    
#Reading R code files (inverse of dput)     
#      dget
      
#Reading in saved workspaces
#      load
#Reading binary objects    
#      unserialize
      
#analogous functions for writing data to files
#     write.table
#     writeLines
#     dump
#     dput
#     save
#     serialize

#read.table functions
#name of a file, or a connection
#     file
#        header, logical indicating if the file has a header line
#        sep, a string indicating how the columns are separated
#        colClasses, a character vector indicating the class of each column in the dataset
#        nrows, the number of rows in the dataset
#        comment.char, a character string indicating the comment character
#the number of lines to skip from the beginning
#     skip
#character variables be coded as factors        
#     stringsAsFactors

######################
# Reading Large Tables
######################

Read the help page for read.table

Make  a  rough  calculation  of  the  memory  required  to  store  your  dataset (ram and other applications running)

Set comment.char = "" if there are no commented lines in your file
##
example
1,500,000 × 120 × 8 bytes/numeric
= 1440000000 bytes
= 1440000000 /2^20 bytes/MB
= 1,373.29 MB
= 1.34 GB   so you'll need at leat twice for processing.

##
Use  the "colClasses" argument.  Specifying  this  option  instead  of  using  the  default  can  make 'read.table' run MUCH faster. In order to use this option, you have to know the class  of  each  column  in  your  data  frame.  If  all  of  the  columns  are  “numeric”,  for  example,  then
you  can  just  set colClasses = "numeric" 
To  figure  out  the  classes  of each column is the following:

      initial <- read.table("datatable.txt", nrows = 100)
      classes <- sapply(initial, class)
      tabAll <- read.table("datatable.txt",
                           colClasses = classes)
                           
Set "nrows". Helps with memory usage. 

######################
# Textual Data Formats
######################

dput()
dump()

dput () example

> y <- data.frame(a = 1, b = "a")
> dput(y)
structure(list(a = 1,
               b = structure(1L, .Label = "a",
                             class = "factor")),
          .Names = c("a", "b"), row.names = c(NA, -1L),
          class = "data.frame")
> dput(y, file = "y.R")
> new.y <- dget("y.R")
> new.y

Dumping Objects example
> x <- "foo"
> y <- data.frame(a = 1, b = "a")
> dump(c("x", "y"), file = "data.R") 
> rm(x, y)
> source("data.R")
> y
> x


##############################################
# Connections: Interfaces to the Outside World
##############################################

file
gzfile .gzip
bzfile .bzip2
url

File connections
> str(file)
function (description = "", open = "", blocking = TRUE,
          encoding = getOption("encoding"))

description is the name of the file
open  is a code indicating
    “r” read only
    “w” writing (and initializing a new file)
    “a” appending
    “rb”, “wb”, “ab” reading, writing, or appending in binary mode (Windows)

Connections: to navigate files or external objects.
    con <- file("foo.txt", "r")
    data <- read.csv(con)
    close(con)

or 

    data <- read.csv("foo.txt")

#To read the 10 first lines of a text file

> con <- gzfile("words.gz") 
> x <- readLines(con, 10) 
> x
 [1] "1080"     "10-point" "10th"     "11-point"
 [5] "12-point" "16-point" "18-point" "1st"
 [9] "2"        "20-point"

writeLines takes a character vector and writes each element on line at a time.

readLines from webpages
con <- url("http://www.jhsph.edu", "r")
x <- readLines(con)
> head(x)
[1] "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">"
[2] ""
[3] "<html>"
[4] "<head>"
[5] "\t<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8

######################
# Subsetting R Objects
######################

"[" return and object of the same class; select more than one element
        x <- c("a", "b", "c", "c", "d", "a")
        x[1]
        x[2]
        x[1:4]
        x[x "a"]
        u <- x "a"
        u
        x[u]
[[
to extract single elements of a list or a data frame
$
extract elements of a list by name
