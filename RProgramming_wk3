Ref to Programming Assignment 2
https://github.com/rdpeng/ProgrammingAssignment2/pull/82/files?short_path=04c6e90

#################
# Loops functions
#################

#lapply:Loop over a list and evaluate a function on each element. Returns a list, regardless of the input.
	split: auxiliary function of lapply
#sapply: Same as lapply but try to simplify the result
#apply: To evaluate a function over the margins of an array. Used to apply a function to the rows or columns of a matrix. Not to fast. Easier to write.
#tapply: Apply a function over subsets of a vector
#mapply: Multivariate version of lapply

#lapply
	x <- list(a = 1:5, b = rnorm(10))
	lapply(x, mean)
	-------------
	x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
	lapply(x, mean)
	-------------
	x <- 1:4
	lapply(x, runif)
	-------------
	x <- 1:4
	lapply(x, runif, min = 0, max = 10)
	-------------
	x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
	x
	-------------
	lapply(x, function(elt) elt[,1])

#sapply
	x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))
	lapply(x, mean)
	sapply(x, mean)
	mean(x) #error

#apply
	str(apply)
	?str

	x <- matrix(rnorm(200), 20, 10)
	apply(x, 2, mean)
	apply(x, 1, sum)
	
	#col/row sums and means. Special functions
	rowSums = apply(x, 1, sum)
	rowMeans = apply(x, 1, mean)
	colSums = apply(x, 2, sum)
	colMeans = apply(x, 2, mean)
	
	#Quantiles of the rows of a matrix
	x <- matrix(rnorm(200), 20, 10)
	apply(x, 1, quantile, probs = c(0.25, 0.75))
	
	#Average matrix in an array
	a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
	apply(a, c(1, 2), mean)
	rowMeans(a, dims = 2)

##########################
# Loops Functions - mapply
##########################

#mapply: a multivariate apply of sorts which applies a function in parallel over a set of arguments. Apply a function to 2 list.

str(mapply)

#FUN is a function to apply
#... contains arguments to apply over
#MoreArgs is a list of other arguments to FUN.
#SIMPLIFY indicates whether the result should be simplified

list(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))
mapply(rep, 1:4, 4:1)

#Vectorizing a function
noise <- function(n, mean, sd) {
rnorm(n, mean, sd)
}

noise(5, 1, 2)
noise(1:5, 1:5, 2)

#Instant vectorization
mapply(noise, 1:5, 1:5, 2)

list(noise(1, 1, 2), noise(2, 2, 2),
noise(3, 3, 2), noise(4, 4, 2),
noise(5, 5, 2))

##########################
# Loops Functions - tapply
##########################

tapply: used to apply a function over subsets of a vector. I don’t know why it’s called tapply.
str(tapply)

#X is a vector
#INDEX is a factor or a list of factors (or else they are coerced to factors)
#FUN is a function to be applied
#... contains other arguments to be passed FUN
#simplify, should we simplify the result?

x <- c(rnorm(10), runif(10), rnorm(10, 1))
f <- gl(3, 10)
f
tapply(x, f, mean)	#take group means
tapply(x, f, mean, simplify = FALSE)	#take group means without simplification
tapply(x, f, range)	#find group range

#########################
# Loops Functions - split
#########################

#split: takes a vector or other objects and splits it into groups determined by a factor or list of factors.

str(split)

#x is a vector (or list) or data frame
#f is a factor (or coerced to one) or a list of factors
#drop indicates whether empty factors levels should be dropped
	x <- c(rnorm(10), runif(10), rnorm(10, 1))
	f <- gl(3, 10)
	split(x, f)		#spliting the vector in three parts 
 
 min: 1:25
