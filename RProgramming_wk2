##############################
# Control Structures: if -else
##############################

if (<condition>) {
        ## do something
} else {
        ## do something else
}
if (<condition1>) {
        ## do something
} else if(<condition2>)  {
        ## do something different
} else {
## do something different
}
#####
if(x > 3) {
        y <- 10
} 
else {
        y <- 0
}
#####
y <- if(x > 3) {
        10
} 
else  { 
        0
}


###############################
# Control Structures: For loops
###############################

for loops take an interator variable and assign it successive values from a sequence or vector.
                for(i in 1:10) {
                	print(i)
                }
                
#####

                x <- c("a", "b", "c", "d")
                for(i in 1:4) {
                	print(x[i])
                }
                
                for(i in seq_along(x)) {
                	print(x[i])
                }				#same process as above
                
                for(letter in x) {		
                	print(letter)
                }				#same process as above
                
                for(i in 1:4) print(x[i])
#####
nested for loops

                x <- matrix(1:6, 2, 3)
                for(i in seq_len(nrow(x))) {
                	for(j in seq_len(ncol(x))) {
                		print(x[i, j])
                	}
                }
#2 rows, 3 columns repeated in a vector arrangement?
                
#################################
# Control Structures: While loops
#################################

count <- 0
while(count < 10) {
	print(count)
	count <- count + 1
}

#Important to establish a hard limit

z <- 5
while(z >= 3 && z <= 10) {
	print(z)
	coin <- rbinom(1, 1, 0.5)

	if(coin == 1) { ## random walk
		z <- z + 1
	} else {
		z <- z - 1
	}
}

#################################
# Control Structures: Repeat, next, return
#################################

#Repeat: infinite loop. To exit, must call a break.

x0 <- 1
tol <- 1e-8

repeat {
	x1 <- computeEstimate() #not a function

	if(abs(x1 - x0) < tol) {
		break
	} else {
		x0 <- x1
	}
}

#Next: to skip an iteration for loop

for(i in 1:100) {
	if(i <= 20) {
		## Skip the first 20 iterations
		next
	}
	## Do something here
}

Repeat: infinite loop. To exit, must call a break.

x0 <- 1
tol <- 1e-8

repeat {
	x1 <- computeEstimate() #not a function

	if(abs(x1 - x0) < tol) {
		break
	} else {
		x0 <- x1
	}
}



#######################
# Your first R function
#######################

add2 <- function(x, y) {
  x + y
}
add2(3, 5)

above10 <- function(x) {
        use <- x > 10
        x[use]
}
######
above <- function(x, n) {
  use <- x > n
  x[use]
}

x <- 1:20
above(x, 12)
######
columnmean <- function(y) {
      nc <- ncol(y)
      means <- numeric(nc)
      for(i in 1:nc) {
                means[i] <-mean(y[,i])
      }
      means
}
columnmean(airquality)
######
columnmean <- function(y, removeNA = TRUE) {
	nc <- ncol(y)
	means <- numeric(nc)
	for(i in 1:nc) {
	means[i] <-mean(y[,i], na.rm = removeNA)
	}
	means
}
columnmean(airquality)
columnmean(airquality, FALSE)
